function Screen.init 0
push constant 0
not
pop static 0
push constant 16384
pop static 1
push constant 24575
pop static 2
push constant 15
call Array.new 1
pop static 3
push constant 0
push static 3
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 3
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 3
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 3
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 3
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 3
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 3
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push static 3
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push static 3
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push static 3
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push static 3
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push static 3
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push static 3
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push static 3
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push static 3
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
push static 3
add
push constant 32767
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 16
push static 3
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.clearScreen 3
push constant 0
pop local 0
push static 1
pop local 1
push static 2
push constant 1
add
pop local 2
label WHILE_EXP0
push local 1
push local 2
lt
not
if-goto WHILE_END0
push local 1
push local 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 5
push static 1
pop local 4
push argument 0
push constant 16
call Math.divide 2
pop local 3
push argument 1
push constant 32
call Math.multiply 2
push local 3
add
pop local 1
push local 1
push local 4
add
pop pointer 1
push that 0
pop local 2
push argument 0
push local 3
push constant 16
call Math.multiply 2
sub
pop local 0
push local 2
push local 0
push static 3
add
pop pointer 1
push that 0
and
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push static 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
push local 4
add
push local 2
push local 0
push static 3
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE1
goto IF_END0
label IF_FALSE0
push static 0
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 1
push local 4
add
push local 2
push local 0
push static 3
add
pop pointer 1
push that 0
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE2
label IF_END0
push constant 0
return
function Screen.drawLine 23
push static 1
pop local 15
push argument 2
push argument 0
sub
pop local 20
push argument 3
push argument 1
sub
pop local 21
push argument 0
pop local 18
push argument 1
pop local 19
push constant 0
pop local 22
push local 21
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 2
push argument 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
pop local 0
push argument 2
pop argument 0
push local 0
pop argument 2
push argument 0
pop local 18
label IF_FALSE1
push local 18
push constant 16
call Math.divide 2
pop local 10
push local 19
push constant 32
call Math.multiply 2
push local 10
add
pop local 6
push local 18
push local 10
push constant 16
call Math.multiply 2
sub
pop local 5
push argument 2
push argument 0
sub
pop local 4
push constant 0
pop local 1
push local 4
push constant 16
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 5
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 1
neg
pop local 1
goto IF_END3
label IF_FALSE3
push constant 17
push local 5
sub
push static 3
add
pop pointer 1
push that 0
push constant 1
sub
pop local 1
label IF_END3
goto IF_END2
label IF_FALSE2
push local 4
push constant 1
add
push static 3
add
pop pointer 1
push that 0
push constant 1
sub
pop local 1
label IF_END2
push local 5
pop local 3
label WHILE_EXP0
push local 3
push constant 0
gt
not
if-goto WHILE_END0
push local 1
push constant 2
call Math.multiply 2
pop local 1
push local 3
push constant 1
sub
pop local 3
goto WHILE_EXP0
label WHILE_END0
push static 0
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 6
push local 15
add
push local 6
push local 15
add
pop pointer 1
push that 0
push local 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END4
label IF_FALSE4
push local 6
push local 15
add
push local 6
push local 15
add
pop pointer 1
push that 0
push local 6
push local 15
add
pop pointer 1
push that 0
push local 1
and
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END4
push local 4
push constant 16
push local 5
sub
sub
pop local 4
push local 6
push constant 1
add
pop local 6
label WHILE_EXP1
push local 4
push constant 0
gt
not
if-goto WHILE_END1
push local 4
push constant 14
gt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 4
push constant 16
sub
pop local 4
push static 0
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 6
push local 15
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END6
label IF_FALSE6
push local 6
push local 15
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END6
goto IF_END5
label IF_FALSE5
push static 0
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 6
push local 15
add
push local 4
push constant 1
add
push static 3
add
pop pointer 1
push that 0
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END7
label IF_FALSE7
push local 6
push local 15
add
push local 6
push local 15
add
pop pointer 1
push that 0
push local 6
push local 15
add
pop pointer 1
push that 0
push local 4
push constant 1
add
push static 3
add
pop pointer 1
push that 0
push constant 1
sub
and
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END7
push constant 0
pop local 4
label IF_END5
push local 6
push constant 1
add
pop local 6
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
label IF_FALSE0
push constant 0
pop local 14
push local 21
push constant 0
lt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push local 21
neg
pop local 21
push constant 0
not
pop local 14
label IF_FALSE8
push constant 0
pop local 13
push local 20
push constant 0
lt
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push local 20
neg
pop local 20
push constant 0
not
pop local 13
label IF_FALSE9
push constant 0
pop local 16
push constant 0
pop local 17
label WHILE_EXP2
push local 16
push local 20
lt
push local 16
push local 20
eq
or
push local 17
push local 21
lt
push local 17
push local 21
eq
or
and
not
if-goto WHILE_END2
push local 14
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push local 19
push local 17
sub
pop local 9
goto IF_END10
label IF_FALSE10
push local 19
push local 17
add
pop local 9
label IF_END10
push local 13
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push local 18
push local 16
sub
pop local 8
goto IF_END11
label IF_FALSE11
push local 18
push local 16
add
pop local 8
label IF_END11
push local 8
push local 9
call Screen.drawPixel 2
pop temp 0
push local 22
push constant 0
lt
if-goto IF_TRUE12
goto IF_FALSE12
label IF_TRUE12
push local 16
push constant 1
add
pop local 16
push local 22
push local 21
add
pop local 22
goto IF_END12
label IF_FALSE12
push local 17
push constant 1
add
pop local 17
push local 22
push local 20
sub
pop local 22
label IF_END12
goto WHILE_EXP2
label WHILE_END2
push constant 0
return
function Screen.drawRectangle 0
label WHILE_EXP0
push argument 1
push argument 3
lt
not
if-goto WHILE_END0
push argument 0
push argument 1
push argument 2
push argument 1
call Screen.drawLine 4
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 6
push argument 2
neg
pop local 0
push argument 2
push argument 2
call Math.multiply 2
pop local 5
label WHILE_EXP0
push local 0
push argument 2
push constant 1
add
eq
not
not
if-goto WHILE_END0
push argument 1
push local 0
add
pop local 3
push argument 2
push argument 2
call Math.multiply 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 4
push argument 0
push local 4
sub
pop local 1
push argument 0
push local 4
add
pop local 2
push local 1
push local 3
push local 2
push local 3
call Screen.drawLine 4
pop temp 0
push local 0
push constant 10
neg
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
