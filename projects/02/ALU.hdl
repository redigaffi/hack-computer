// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
		// if (zx == 1) set x = 0
		Mux16(a=x, b=false, out=zxout, sel=zx);

		// if (nx == 1) set x = !x
		Not16(in=zxout, out=nx1);
		Mux16(a=zxout, b=nx1, out=nxout, sel=nx);

		// if (zy == 1) set y = 0
		Mux16(a=y, b=false, out=zyout, sel=zy);

		// if (ny == 1) set y = !y
		Not16(in=zyout, out=ny1);
		Mux16(a=zyout, b=ny1, out=nyout, sel=ny);

		// if (f == 1)  set out = x + y
		// if (f == 0)  set out = x & y
		Add16(a=nxout, b=nyout, out=addxy);
		And16(a=nxout, b=nyout, out=andxy);
		Mux16(a=andxy, b=addxy, out=tmpout, sel=f);

		// if (no == 1) set out = !out 
		Not16(in=tmpout, out=nout);
		Mux16(a=tmpout, b=nout, out=out, out[8..15]=out115, out[0..7]=out108, out=out1, sel=no);
		
		// if (out == 0) set zr = 1
		Or8Way(in=out108, out=zror1);
		Or8Way(in=out115, out=zror2);
		Or(a=zror1, b=zror2, out=zror);
		Not(in=zror, out=zr);
		
		// if (out < 0) set ng = 1
		And16(a=out1, b=true, out[15]=ng);
}
